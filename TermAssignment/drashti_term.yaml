AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Term Assignment B00948838
Resources:
  S3bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ca-file-mgt
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["PUT", "POST", "DELETE", "GET"]
            AllowedOrigins: ["*"]
            MaxAge: 100
    DeletionPolicy: Retain

  uploadFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: uploadFile
      Runtime: python3.12
      Role: arn:aws:iam::992382566420:role/LabRole
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: b00948838
        S3Key: uploadFile.zip
      Timeout: 120  

  displayFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: displayFile
      Runtime: python3.12
      Role: arn:aws:iam::992382566420:role/LabRole
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: b00948838
        S3Key: displayFile.zip
      Timeout: 120  

  deleteFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: deleteFile
      Runtime: python3.12
      Role: arn:aws:iam::992382566420:role/LabRole
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: b00948838
        S3Key: deleteFile.zip
      Timeout: 120  


#uploadFile  
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: cloudterm
      BinaryMediaTypes:
        - /*/*
        - /*

  apiresponse4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_4XX
      StatusCode: '404'
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

  apiresponse5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_5XX
      StatusCode: '500'
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
 
  uploadApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: uploadFile

  uploadApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref uploadApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: false
      Integration:
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${uploadFileLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  displayApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: displayFile

  displayApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref displayApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: false
      Integration:
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${displayFileLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  deleteApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: deleteFile

  deleteApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref deleteApiGatewayResource
      RestApiId: !Ref ApiGateway
      ApiKeyRequired: false
      Integration:
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteFileLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  uploadFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref uploadFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/uploadFile

  displayFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref displayFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/displayFile

  deleteFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref deleteFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/deleteFile
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - deleteApiGatewayMethod
      - displayApiGatewayMethod
      - uploadApiGatewayMethod
      - apiresponse4xx
      - apiresponse5xx
    Properties:
      RestApiId: !Ref ApiGateway

  deleteApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiGatewayDeployment
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: prod

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2Securitygroup
      GroupDescription: Allow HTTP/HTTPS and SSH inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
          
  FileManagementEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-080e1f13689e07408
      KeyName: cloud-term
      SecurityGroupIds:
        - !Ref EC2SecurityGroup